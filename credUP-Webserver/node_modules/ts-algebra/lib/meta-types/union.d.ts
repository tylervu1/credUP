import { A } from "ts-toolbelt";
import { If, DoesExtend } from "../utils";
import { Never, NeverType } from "./never";
import { $Resolve, ResolveOptions } from "./resolve";
import { Type } from "./type";
export declare type UnionTypeId = "union";
export declare type Union<V extends Type> = $Union<V>;
export declare type $Union<V> = If<A.Equals<V, never>, Never, DoesExtend<V, NeverType> extends true ? Never : {
    type: UnionTypeId;
    values: V;
}>;
export declare type UnionType = {
    type: UnionTypeId;
    values: Type;
};
export declare type UnionValues<U extends UnionType> = U["values"];
export declare type ResolveUnion<U extends UnionType, O extends ResolveOptions> = RecurseOnUnion<UnionValues<U>, O>;
declare type RecurseOnUnion<V extends Type, O extends ResolveOptions> = V extends infer T ? $Resolve<T, O> : never;
export {};
